@page "/custom-input-text-area-with-validation-display-control"

<a href="/" style="padding-bottom: 1em; display: block">Back</a>

<h1>CustomInputTextAreaWithValidationDisplayControl</h1>

<p>
    The below form relies on the combination of an EditContext and a custom InputTextArea. This example mostly works but
    it still doesn't feel ideal.
</p>

<p>
    If the model validation is complex or time consuming, running validation on each key stroke is overkill;
    particularly when validation failures won't show until the form has been submitted.
</p>

<p>Behavior to notice:</p>
<ul>
    <li>Validation error messages only show on submit.</li>
    <li>The form is still colored red or green as the user types so the boolean doesn't completely control validation indicators</li>
    <li>Validation is triggered as the user types which might be resource intensive.</li>
</ul>


<h2>Demo</h2>
<EditForm EditContext="EC">
    <DataAnnotationsValidator/>

    @if (ShowValidation)
    {
        <ValidationSummary/>
    }

    <InputTextAreaOnInput
        placeholder="Enter your message here"
        @bind-Value="Model.Message"
        @onkeypress="SubmitOnEnter"/>
    <p>@DebugMessage</p>
</EditForm>

@code {
    private bool ShowValidation { get; set; } = false;
    private ExampleModel Model { get; set; } = new ExampleModel();
    private string DebugMessage { get; set; }

    private EditContext EC { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        EC = new EditContext(Model);
    }

    private void SubmitOnEnter(KeyboardEventArgs args)
    {
        ShowValidation = false;
        if (args.CtrlKey && args.Key == @"Enter")
        {
            DebugMessage = EC.Validate() ? "EC.Validate() is true" : "EC.Validate() is false";
            ShowValidation = !EC.Validate();
        }
    }
}